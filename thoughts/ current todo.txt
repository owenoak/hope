Course of action
	- Class
		- <event name='' with=''/>
			- in class def, collect into {...events : []...}
			- good to have a list of events for introspection
		- add xml auto-registration 
		- have class remember mixins
			- clone superclass mixin:[] on class create
			- mixin looks for 'mixins' on the mixee and adds itself to list (in constructor only)
		- switch to properties format:
			<properties><number/><list/><set/><event/>etc</properties>
				+ we can have statics
				+ can reuse numberDef/listDef/setDef for types, etc

	- Parser
		- teach XML parser about <thing ref=''/>, at least for thing, mixin, type, 


- write up the Class/set/get/notify scheme 
	- set_x vs setX in mixin is confusing
	- "set" event shouldn't inherit by default
	? add aliases for setting, 
	? how can, eg, mixins set things up
	? ALWAYS have internals start with _ ?  inelegant, but clean separation...

	- define public API for everything (in XML/english) and be vigorous about what we set()
	- check what we start watching what I set() and what I set directly

	- observe should use "loaded" not "onLoaded"
	- make sure observe/etc is case-insensitive
	- way of, (eg Url, Script, Service), having each item only once by primary key?
		- if so, have update semantics on create
		
	- add setEvent/setEvents to Observable to observe() with event
	- we're not observable until we're properly set up (???)
		- view relationship won't be set up until object is already 
		- views will have a chance to bind() at the start?
	- move from explicit "onXXX" properties to ALWAYS notifying
	- "Things" as classes which can be loaded as XML or JS + saved?
	- require manual passing of intercepted events


- write up xml/js loading scheme
	- push parallel loading scheme into Loadable w/ parallelizable flag?
	- parsing taking child types into account automatically:
		- when we encounter a known element, pull out attributes and create a Thing
		- for each child
			- if a text node, add to "value" -- this feels a little wierd
			- if an element, create according to type 
				and call "thing.set(elementType, created element)
			- if an event, call observe (?)
				<on event='name' key=''>...</on>
				
		- eg: for package,
			have setScript(), setStylesheet(), setEvent()
		- eg: for g6 config
			- setConfig(), setService(), 
			- not how we check and re-define the same instances

		- when running through object children
			if object && object.set(), call object.set()
				- so on package, setScript() adds script to files, etc

	- make package smart enough to load JS/CSS/Templates in parallel
		(make sure to eval JS in order)
	- src vs. url for loadable things (so we have parity with <script> tags
	- check loading semantics
		- notify("onLoad", file, "Script"|"Package"|etc, file)
	- get 'loaded' notification working
	- push hope bootstrap loader into reuseable routine?
	- have hopePackage bootstrapped to package as soon as package loads


- convert to //! for doc comments (runs until un-commented non-blank line)
	- can do this at the end of a line   //! blah blah



AFTER THAT
	- Stylesheet w/replace semantics
	- global event capture
	- messages bubbling through containers
	- Element / ElementList
		- attach directly to Element prototypes, fuck 'em if they don't like it
	- Drawable
	- HTMLDrawable
	- CanvasDrawable


	
Class/etc
	- put xml tag name into class definition
	- classes should remember their (and their super's) mixins
	- use html namespaces to do 'modules/namespaces'
		- xml.parseElement() takes defaultNamespace parameter
			- custom (eg: "Gear6" for statsproxy config.xml)
			- default is 'hope'
			- use 'object' to parse everything anonymously
		- XmlFile/loader can define default namespace
		- pull namespaces out of XML
		- when we parse something with a namespace, children get that NS automatically
		
	- inheritance functions:
		- hope.Class.inherit(method, args)
			-- uses <method>.caller to get instance
			-- can we get function name somehow?  via displayName ?
			-- function.name works! 	  
	  
	- way that mixins can do something on instance init...


- push all browser-specific stuff into a separate file
	(check if navigator/useragent)

Notify
	- observe takes 'key' and 'inherit' parameters
		- switch observe to take args array, just store that
		- skips notify if key doesn't match
		- some way to automatically do class-level things (eg: aliases)
	- sometimes we want to notify up the chain, and sometimes we don't (?)
	- have universal 'container' concept  (controller?)
		- if I don't have any observers for an event,
			if I have a container, tell the container to notify for the event
		- get rid of dotted events so we don't have two loops
	- Dependent properties register 'change' on their dependencies
		which does NOT propagate up (since their own change WILL propagate up)


Events
	- do global mouse/key capture thing & set hope.Event properties
	- register events on Things, not on elements
		- register pointer to Thing on element during draw, remove on destroy/set HTML
		- maybe means that, eg, scrollbuttons are full Things
	- procedure:
		- capture pre-bubbling events to set global event properties
			- also works for edit mode, context menu, etc
		- any in-page handlers will fire as normal, if they stop bubbling, we're done
		- have body handler for mouse/key events which routes them through the thing heirarchy
			- this handles the synthesized events/gestures/etc for us
	- right-click for app context menu vs edit mode
		- would be great to avoid the 'edit mode' in HC
		- or
			- if in edit mode, right-click does edit mode thing
			- if not in edit mode, shift-right-click does edit mode thing

Aliases
	- setX() for either alias MUST send notifications for both [all] properties
	- if you define an alias, we:
		- create a getter which directly references the other property
		- create a setX() which calls setX() for the other property
		- register a 'binding' from one to the other (how to avoid inifinite loop?)
			- or maintain a separate 'aliases' map?  but we may have many aliases...
		- register a 'change' handler on other property to notify change for boths
			(default target for change handler is observer?)

Layout
	- use CSS3 layout, rationalized into english
		- http://www.w3.org/TR/2009/WD-css3-layout-20090402/
		- http://www.css3.info/introducing-the-flexible-box-layout-module/
		- http://alex.dojotoolkit.org/2009/08/css-3-progress/
		- http://a.deveria.com/csstpl/
	- not yet supported in either webkit or moz
	- jquery plugin
		http://code.google.com/p/css-template-layout/
	- we'll be parsing CSS anyway...?

	- how will we vary layouts dynamically with this?  even possible?

Animation/Transform
	- we're good on transforms in FF/Safari
	- animation not supported in FF, but see:
		http://weston.ruter.net/projects/jquery-css-transitions/
		http://code.google.com/p/transformie/
	- animation ref
		http://webkit.org/blog/324/css-animation-2/
		http://www.the-art-of-web.com/css/timing-function/
	- what animations do we want to support?
	

Taggable
	- automatically segments a group of things by tag='a,b,c'
	- TaggedSet ?
