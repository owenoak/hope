
Flyweight instantiation pattern
	- what do we know:
		- would prefer to do direct access for getters, BUT
		- don't want to have to differentiate between expressions and properties
			which implies that we always use getters
		- some expressions take arguments
		- properties need to inherit
		- need to export ONLY properties
			- could do by keeping a separate object (space), or
			- could do by reflection (time, although a good 'own properties' would work)
		
	- we want
		- using setters for everything is fine
		- using direct access for getters is best, use getters for dynamic stuff
		- 'properties' want to be stored in a different object for export
		- 'properties' need to 
		- properties to inherit
		- pro
	- think about having the 'properties' be the (only) thing that inherits
		and the 'object' syntax being flyweighted with a cache
		- would want to 

