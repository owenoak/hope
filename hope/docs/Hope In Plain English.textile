
What is HOPE?

Hope allows you to easily create computer programs that present and manage dynamic data.

This data can come from many places, from a web site like Google to a {custom-built data set on your own computer}.  Where things get really exciting is the ability to mix data from different places in one program, for example {XXX}.

One way HOPE makes the process of creating a program easier is by separating the data "model" from the presentation of the data.  {explain 'data' vs 'data model'}

The "data model" is the description of the data -- the web location or url where the data comes from, {the names and attributes of the strings and numbers that make up the data}, and what actions you can take on the data, like make a new one, or delete an existing one.

Each data model can have many different presentations or "views" -- screens which present the data in different ways.  Presentations are made up of "controls", such as checkboxes, text fields or buttons, which are "bound" to different parts of your data model.  When the data in your data model changes, the field automatically changes to show the new value.  Also, when you change the data in a control, say by typing in a text field, this changes the underlying data automatically.

As a concrete example, let's say we are creating a program which manages a set of recipes for cooking.  We want to be able to do a number of things:
	* Find recipes from online sources such as epicurious.com and betterhousekeeping.com
	* Customize recipes by adding notes, writing down alternatives, etc.
	* Add our own recipes to our database, share them with our friends or even publish them on the internet.
	* Remember which recipes we've cooked, and when, and how they turned out
	* Adjust ingredients for the number of people we're actually cooking for
	* Do meal planning and create shopping lists of ingredients we'll need to make those meals
	* While we're cooking, present the recipe in an easy, step-by-step manner that makes it easy to keep track of what we're doing

From this description of *what* we want to do, we can start to think about the screens or "views" that we will need to accomplish those tasks:

	* A "search" screen, where we can find recipes from online sources as well as recipes that we have created ourselves.

	* An "editing" screen, where we can customize a recipe or even enter a new recipe that we've created ourselves.

	* A "meal prep" screen, where we can adjust the ingredients of a recipe for the number of people we are cooking for, create shopping lists, etc

	* A "cooking" screen, which presents the steps of the recipe one at a time, to make it easy to follow the recipe while we're in the kitchen.  This might also allow us to switch back and forth between a number of recipes that we're cooking at the same time.


Now that we have a sense of how our program will work, we can think of the "data model" of our recipes, how we will represent the data of the recipe.  Each recipe has:

	* a list of "ingredients"
	* a list of "steps" we need to take to make the recipe
	* our notes on the recipe

Diving in a little deeper, for ingredients:
	* each ingredient specifies a quantity (eg: *2 cups* of tomatoes, chopped)
	* each ingredient has a food (eg: 2 cups of *tomatoes*, chopped)
	* ingredients often specify a pre-preparation step (eg: 2 cups of tomatoes, *chopped*)
	* recipe authors can specify substitutions (eg: substituting oil for butter)

For the "steps" of a recipe:
	* linking a step in the recipe to a specific set of ingredients will make it easier to present the step-by-step directions

And for our notes on the recipe, we may want to:
	* remember where the recipe originally came from
	* add or omit steps to the recipe
	* add notes about things we noticed when making the recipe
	* specify substitutions for ingredients
	* create variations of the recipe
	* rate the recipe
	* tag it so we can find it later


<Model name='recipe'>
	<attributes></attributes>
	<actions></actions>
</Model>

<Model name='ingredient'></Model>

<Model name='step'></Model>
