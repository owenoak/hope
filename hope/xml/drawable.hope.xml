<!-- 

	Note: default is to draw from a template.   Override to do some other scheme.
	
	TODO:
		- Events? define special events here or in element?
		- layout semantics (both child layout semantics and flex/location/etc)
		- give drawable as much of the same interface as element as remotely makes sense
	
	Interesting to maybe do:
		- key map:		set of 'key+modifier+modifier' to 'action' bindings
		- fancy hover (get a dynamic property of element?)
		- showif/enable if ?

-->

<thing type='drawable' isa="tree" is='dimensioned,editable,selectable,enabled,focusable'>
	<set name='attributes' each='attribute' save='yes'/>
	<!-- aliases for attributes: 
			- if not set on part, will be saved via the attributes themselves 
			- default part is 'element'
			- setting attribute on drawable will set on specified part
	-->
	<expression name='id'/>
	<expression name='class'/>	<!-- get class methods from element -->
	<expression name='style'/>	<!-- get style methods from element -->
	<expression name='tool tip'/>
	<expression name='tab index'/>
	<expression name='access key'/>
	<expression name='drag resize'/>
	<expression name='drag move'/>

	<!-- drawing -->
	<command syntax='draw (drawable)'/>
	<condition syntax='drawn'/>

	<mixin ref='fill style'/>
	<mixin ref='border style'/>
	<mixin ref='showing handles'/>
	<mixin ref='css transforms'/>

	<!-- redrawing/updating different elements of the ui.  Updates values and does showif/enable if. -->
	<command syntax='redraw (drawable)'/>

	<property name='update style' type='update styles' default='redraw'>
	<command syntax='update (drawable)'/>
	<set name='updatable parts' type='elements' settable='false'/>
	
	<set name='dynamic parts' type='elements' settable='false'/><!-- showif/enableif -->

	<set name='templates' each='template' type='template'/>
	<command name='expand [(name)] template [of (drawable)]'/>	<!-- default template is thing type -->


	<!-- outer element of the drawable -->
	<expression name='element' type='element'/>

	<!-- parts: sub-elements of our UI.  Parts in our main element after draw are auto-added as direct properties -->
	<set name='parts' each='part' type='element' export='true' settable='false'/>
	<expression name='body' returns='element'/> <!-- body: container for our children -->

	<!-- context menu.  Set to a string to apply by reference. -->
	<property name='menu' type='menu'/>
	<command syntax='show menu'/>

	<!-- assiging to an event will install it on the main element or part-->
	<mixin ref='mouse events'/>
	<mixin ref='keyboard events'/>
	<mixin ref='container events'/>
	<mixin ref='resize events'/>
	<mixin ref='gestures'/>
</thing>
