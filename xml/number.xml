<!-- percent type ?-->
<thing type='number'>
	<group name='number condition'>
		<condition syntax='(number) {is greater than|&gt;} (other number)'/>
		<condition syntax='(number) {is greater than or equal to|&gt;=} (other number)'/>
		<condition syntax='(number) {is less than|&lt;} (other number)'/>
		<condition syntax='(number) {is less than or equal to|&lt;=} (other number)'/>
		<condition syntax='(number) is between (max) and (min)'/>
		<condition syntax='(value) is not a number'/>
	</group>
	
	<expression syntax='(number) {+|plus} (other number)' returns='number'/>
	<expression syntax='(number) {-|minus} (other number)' returns='number'/>
	<expression syntax='(number) {/|divided by} (other number)' returns='number'/>
	<expression syntax='(number) {*|times} (other number)' returns='number'/>

	<!-- these deal with number VARIABLES -->
	<command syntax='add (number) to (numberVar)' returns='number'/>
	<command syntax='subtract (number) from (numberVar)' returns='number'/>
	<command syntax='multiply (numberVar) by (other number)' returns='number'/>
	<command syntax='divide (numberVar) by (other number)' returns='number'/>
	
	<expression syntax='round (number) [{to|with} (precision) [digits]]' returns='number'/>
	<expression syntax='round (number) up [{to|with} (precision) [digits]]' returns='number'/>
	<expression syntax='round (number) down [{to|with} (precision) [digits]]' returns='number'/>

	<expression syntax='max[imum] of (number) [and (number)]+' returns='number'/>
	<expression syntax='min[imum] of (number) [and (number)]+' returns='number'/>

	<format as='string [with commas] [{with (precision) digits|with precision (precision)}]' returns='string'/>
	<format as='percent' returns='string'/>
	<format as='json'/>
	<format as='xml'/>
</thing>

