<!-- adaptor for o-based arrays to 1-based "lists" 
	 - NOTE: things can be in the list only once if you use add/remove
-->

<thing type='list' isa='set'>
	<ordinal name='list ordinal' with='item'/>

	<event name='added'/>
	<event name='removed'/>
	<event name='replaced'/>

	<group name='list conditions'>
		<condition syntax='(list) start[s] with (item)'/>
		<condition syntax='(list) end[s] with (item)'/>

		<condition syntax='(list) {is|am} empty' returns='flag'/>
		<condition syntax='(list) {is|am} not empty' returns='flag'/>
	</group>
	
	<!-- length / emptyness -->
	<expression syntax='length of (list)' returns='number'/>
	<expression syntax='number of (items) [of|in] (list)' returns='number'/>


	<!-- indexof -->
	<expression syntax='index of (item) in (list)' returns='number'/>
	<expression syntax='last index of (item) in (list)' returns='number'/>


	<!-- getting items of list -->
	<expression syntax='(list ordinal) of (list)'/>

	<!-- setting list or items of list -->
	<command syntax='set (list) to (new items)'/>
	<command syntax='set (ordinal) of (list) to (item)'/>

	<command syntax='delete (ordinal) of (list)'/>
	<command syntax='add (item) to (list) [at (position:number)]'/>

	<!-- add/remove/replace variants -->	
	<command syntax='add (item) to [the] front of (list)'/>
	<command syntax='add (item) to [the] end of (list)'/>
	<command syntax='prepend (item) to (list)'/>
	<command syntax='append (item) to (list)'/>

	<command syntax='add (this) to (list) before (that)'/>
	<command syntax='add (this) to (list) after (that)'/>
	<command syntax='add {each [item]|all [items]} [of] (items) to (list) [at (position:number)]'/>

	<command syntax='remove (item) from (list)' returns='number'/>
	<command syntax='remove {all [items]|each [item]} [of|from] (items) from (list)'/>

	<command syntax='replace (this) with (that) in (list)'/>

	<!-- miscellaneous -->
	<format as='{text|string} [with (delimiter)]'>	<!-- join -->
	<format as='json'>
	<format as='xml'>
</adaptor>
