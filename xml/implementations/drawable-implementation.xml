<!-- 

	Note: default is to draw from a template.   Override to do some other scheme.
	
	TODO:
		- Events? define special events here or in element?
		- layout semantics (both child layout semantics and flex/location/etc)
		- give drawable as much of the same interface as element as remotely makes sense
	
	Interesting to maybe do:
		- key map:		set of 'key+modifier+modifier' to 'action' bindings
		- fancy hover (get a dynamic property of element?)
		- showif/enable if ?

-->

<thing type='drawable' mixins="tree">

	<!-- identifier which must be unique in within page.  One will be generated if necessary. -->
	<property name='identifier'>
		<setter>
			// create one from class type if not already defined
		</setter>
	</property>

	<!-- parents/children -->
	<property name='parent' type='drawable'>
		<setter>
			as (tree) set (my parent) to it
			if (I have been drawn) 
			  and (my parent) is not empty 
			  and (the body of my parent) is not empty 
			then
				add (my element) to (the body of my container)
			end if
		</setter>
	</property>
	
	<property name='children' type='list of drawables'/>


	<on event="child added" with="(child) and (index)">
		if (I have been drawn) then
			if (child has not been drawn) then tell child to draw
			add (the element of child) to (my body) at index
		end if
	</on>

	<on event="child removed" with="(child) and (index) and (old parent)">
		if (I have been drawn) and (child has been drawn) then
			remove (child's element) from (my body)
		end if
	</on>


	<!-- attributes:  class, style, etc.  All attributes are automatically added to our outer element. -->
	<property name='attributes' type='set'>
		<setter with='set'>
			for each value in set as name
				set (my name attribute) to value
			end for
		</setter>
		<tostring>
			<!-- format as name='value' pairs -->
		</tostring>
	</property>
	<expression name='attribute (name)' alias='(name) attribute'>
		<getter>
			return (property name of my attributes)
		</getter>
		<setter>
			set (property name of my attributes) to it
			if (I have been drawn) then set (attribute name of my element) to it
		</setter>
	</expression>

	<property name='id'>
		<setter>set (my "id" property) to it
				set (my "id" attribute) to it
		</setter>
	</property>

	<property name='class'>
		<setter>
			if (type of it is array) then put (join it with space) into it
			set (my "class" property) to it
			set (my "class" attribute) to it
		</setter>
	</property>

	<property name='style'>
		<setter>
			set (my "style" property) to it
			set (my "style" attribute) to it
		</setter>
	</property>

	<property name='hint'>
		<setter>
			set (my "hint" property) to it
			set (my "hint" attribute) to it
		</setter>
	</property>

	<property name='tab index' alias='tabIndex'>
		<setter>
			set (my "tab index" property) to it
			set (my "tabIndex" attribute) to it
		</setter>
	</property>

	<property name='access key' alias='accessKey'>
		<setter>
			set (my "access key" property) to it
			set (my "accessKey" attribute) to it
		</setter>
	</property>

	<property name='drag resize' alias='dragResize'>
		<setter>
			set (my "drag resize" property) to it
			set (my "dragTesize" attribute ) to it
		</setter>
	</property>

	<property name='drag move' alias='dragMove'>
		<setter>
			set (my "drag move" property) to it
			set (my "dragMove" attribute) to it
		</setter>
	</property>



	<!-- drawing -->
	<command syntax='draw (drawable)'>
		// NOTE: this is very specific to html/template drawing... ?
		expand my template
		hook up my events
		get (my parts)
		if (my update style is "update") then get (my updaters)
		if (my container) exists then 
			put (the index of me in my container) into position
			add (my element) to (the body of my container) at position
		end if
		if (my enabled is false) then set (the enabled of my element) to false 
		if (my selected is true) then set (the selected of my element) to true
		tell each of (my children) to draw
		signal "drawn"
	</command>

	<property name='update style' alias='updateStyle' values='redraw,update' default='redraw'>
	<command syntax='redraw (drawable)'>
		if (my update style) is "redraw" then
			draw
		else
			update
		end if
	</command>

	<expression syntax='drawn' returns='flag'>
		return (my element) is not empty
	</expression>


	<set name='templates' each='template' type='template'/>
	<command name='expand (name) template [of (drawable)]'/>


	<!-- outer element of the drawable -->
	<expression name='element' type='element'>
		<setter with='new element'>
			if (my element) is not empty and (my container) is defined then
				replace (my element) with (new element) in (the body of my container)
			end if
			set (my element) to (new element)
		</setter>
	</expression>

	<!-- parts: sub-elements of our UI.  Hook up to named properties by defining expressions. 
				eg:  <expression syntax='scroller'>return (my "scroller" part)</expression>
	-->
<!-- TODO: recast as a set -->
	<set name='parts' each='part' type='element' export='true' settable='false'>
		if (my element) does not exist then return new set
		if (my cached "parts") is not defined then 
			set (my cached "parts") to Â¬
				(the children of my element with attribute "part" indexed by "part")
		end if
		return (my cached "parts")
	</expression>

	
	<!-- body of the drawable: container for our children -->
	<expression name='body' returns='element'>
		return (my "body" part) or (my element)
	</expression>



	<!-- data/cache: defined after draw -->
	<set name='cache' each='cached' settable='false'>
		<getter>
			return (this.element ? $.data(this.element) : {});
		</getter>
		<getone>
			return $.data(this.element, name);
		</getter>
		<setone>
			if (!this.element) return;
			$.data(this.element, name, it);
		</setone>
	</expression>
	
	
	<!-- enable/disable -->
	<property name="enabled" type='flag' default='true'>
		<getter>
			return (my enabled is true) and (my parents are enabled)
		</getter>
		<setter>
			if it is not undefined then 
				put (it is not false) into (new state)
				if (my enabled) is not (new state) then
					set (my enabled) to (new state)
					if (new state) then	signal "enabled"
					else				signal "disabled"
				end if
			end if
			if (my element) exists then set (the enabled of my element) to (my enabled)
		</setter>
	</property>
	<expression name='parents of (drawable) are enabled' returns='flag'>
		for each parent in (my parents)
			if (the enabled of my parent is false) then return false
		end for
		return true
	</expression>
	<command syntax='enable (drawable)'>
		set (my enabled) to true
	</command>
	<command syntax='disable (drawable)'>
		set (my enabled) to false
	</command>
	
	
	<!-- selection -->
	<property name='selected' type='flag' default='false'>
		<setter>
			if it is not undefined then
				put (it is not false) into (new state)
				if (my selected) is not (new state) then
					set (my selected) to (new state)
					if (I am selected) then 	signal "selected"
					else						signal "deselected"
				end if
			end if
			if (my element) exists then set (the selected of my element) to (I am selected)
		</setter>
	</property>
	<command syntax='select (drawable)'>
		set (my selected) to true
	</command>
	<command syntax='deselect (drawable)'>
		set (my selected) to false
	</command>



	<!-- focus/blur -->
	<property name='focused' type='flag' default='false'>
		<setter>
			if it is not undefined then
				put it is not false into (new state)
				if (new state) is not (my focused) then
					set (my focused) to (new state)
					if (I am focused) then 	signal "focused"
					else					signal "blurred"
				end if
			end if
			if (my element) exists then set (the focused of my element) to (I am focused)
		</setter>
	</property>
	<command syntax='focus [[in|on]] (drawable)'>
		set (my focused) to true
	</command>
	<command syntax='blur (drawable)'>
		set (my focused) to false
	</command>
	
	
	<!-- context menu 
		 Note: if you set this to a string, it 
	-->
	<property name='context menu' type='menu'>
		<setter>
			if (type of value) is string then
				get reference to it
			end if
			
			set (the context menu) of me to it
		</setter>
	</property>
	<command syntax='show context menu of (drawable)' alias='show my context menu'>
		if (my context menu) is not empty then 
			move (my context menu) near me
			show (my context menu)
		end if
	</command>
	
	
	<!-- events -->
	<command syntax='hook up [the] events [of (element)]'>
		<!-- TODO: do something with pulling events from my template and hooking them up automatically -->
	<command>
	
	
	

	<!-- updating different elements of the ui -->
	<expression name='updaters' returns='list of elements'>
		if (my element) does not exist then return new set
		if (my cached "updaters") is not defined then
			put (the updaters of my main template with my element) into updaters
			set (my cached "updaters") to updaters
		end if
		return (my cached "updaters")
	</expression>
	<command syntax='update (drawable)'>
		for each element in (my updaters)
			put (attribute "updater" of element) into expression
			put (evaluate expression with me) into html
			set (the html of element) to html
		end for
	</command>
</thing>
