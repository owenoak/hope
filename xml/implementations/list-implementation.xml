<!-- adaptor for o-based arrays to 1-based "lists" 
	 - NOTE: things can be in the list only once if you use add/remove

TODO: convert to ((list)) and "me/my"

-->
<!-- think about:
		- how can we watch adds/removes in the list?
-->

<adaptor for='list'>
	<!-- specials: these will probably be language built-ins -->
	<iterator syntax='for each [(item variable)] of (list) [do] (actions:block) end for'>
		
	</iterator>


	<operator syntax="(list) + (item)">
		add item to list
	</operator>

	<operator syntax="(list) - (item)">
		remove item from list
	</operator>
	




	<!-- minimal set of primitives in javascript -->
	<expression syntax='length of (list)' returns='number' language='js'>
		return list.length;
	</expression>

	<expression syntax='index of (item) in (list)' returns='number or undefined' language='js'>
		it = list.indexOf(item) + 1;
		if (it == -1) return undefined;
		return it;
	</expression>

	<command syntax='set (position:ordinal) of (list) to (item)' language='js'>
		// TODO: error if position is less than 1?
		list[position-1] = item;	// adjust for 1-based lists
		list.signalEvent("set", item, position);
	</command>

	<command syntax='get (position:ordinal) of (list)' language='js'>
		// TODO: error if position is less than 1?
		it = list[position-1];	// adjust for 1-based lists
	</command>

	<command syntax='delete (position:ordinal) of (list)' language='js'>
		// TODO: error if position is less than 1?
		var item = list[position-1];
		list.splice(position-1, 1);	// adjust for 1-based lists
		list.signalEvent("deleted", item, position);
	</command>

	<command syntax='add (item) to (list) [at (position:number)]' language='js'>
		// TODO: error if position is less than 1?
		if (position == null) position = list.length+1;
		list.splice(position-1, item);	// adjust for 1-based lists
		// list.signalEvent ???
		list.signalEvent("added", item, position);
	</command>
	
	<command syntax='join (list) with (delimiter)' language='js'>
		if (list) return "";
		if (delimiter == null) delimiter = ",";
		return list.join(delimiter)
	</command>
	
	
	
	<!-- more complex or aliases in english -->

	<expression syntax='index in (list) of (item)' returns='number or undefined'>
		return (the index of item in list)
	</expression>

	<expression syntax='(list) {is|am} empty' returns='flag'>
		return (the length of list) is 0
	</expression>

	<expression syntax='(list) {is|am} not empty' returns='flag'>
		return (the length of list) is not 0
	</expression>
	
	<expression syntax='(list) contain[s] (item)'>
		return (the index of item in list) is not undefined
	</expression>
	
	<expression syntax='(list) start[s] with (item)'>
		return (the index of item in list) is 1
	</expression>

	<expression syntax='(list) end[s] with (item)'>
		return (the index of item in list) is (the length of list)
	</expression>
	
	<command syntax='set list (list) to (new items)'>
		if list is not empty then 
			remove each item of list from list
		end if
		add each from (new items) to list
	</command>
	
	<command syntax='add (item) to [the] front of (list)'>
		add item to list at 1
	</command>

	<command syntax='prepend (item) to (list)'>
		add item to list at 1
	</command>
	
	<command syntax='add (item) to [the] end of (list)'>
		add item to list
	</command>
		
	<command syntax='append (item) to (list)'>
		add item to list
	</command>

	<command syntax='add (this) to (list) before (that)'>
		put (the index of that in list) into position
		if position is undefined then put 1 into position
		add item to list at position
	</command>

	<command syntax='add (this) to (list) after (that)'>
		put (the index of that in list) into position
		if position is undefined then put (the length of list) into position
		add 1 to position
		add item to list at position
	</command>
	
	<command syntax='add {each [item]|all [items]} [of] (items) to (list) [at (position:number)]'>
		if position is empty then put (the length of list) into position
		for each item in items
			add item to list at position
			add 1 to position
		end for
	</command>

	<command syntax='remove (item) from (list)' returns='number or undefined'>
		put undefined into (first position found)
		while true
			put (the index of item in list) into index
			if (index is undefined) then exit while
			if (first position found) is undefined then put index into (first position found)
			delete item index of list
		end while
		signal event "removed" with item and (first position found)
		return (first position found)
	</command>

	<command syntax='remove {all [items]|each [item]} [of|from] (items) from (list)'>
		for each item in items
			remove item from list
		end for
	</command>
	
	<command syntax='replace (this) with (that) in (list)'>
		put (index of this in list) into (first position found)
		while true
			put (the index of this in list) into index
			if (index is undefined) then exit while
			delete item index of list
		end while
		add that to list at (first position found)
	</command>
</adaptor>
