<!-- 
	? have an 'element' class which adapts the following syntax directly to the element?
	? hint?
	? how to do event hookup?
	
	- have an element list class which has as many of these methods as makes sense

-->

<thing className='element' plural='elements'>

	<on event='create' language='js'>
		<!-- ??? -->
		this.domNode = $(element);
	</on>
	
	<on event='destroy'>
		if (my parent) is defined then remove me from (my parent)
	</on>
	
	<!-- parent -->
	<expression name='parent'>
		<getter language='js'>
			return this.domNode.parent();
		</getter>
		<setter with='new parent'>
			if (new parent) is (my parent) then return
			if (my parent) is defined then 
				remove me from (the children of my parent)
			end if
			set (my parent) to (new parent)
			if (my parent) is defined then signal "parent set" with (my parent)
		</setter>
	</expression>

	<expression name='{parent||ancestor} {where|which matches} (selector)'>
		<getter language='js'>
			return this.domNode.parent(selector);
		</getter>
	</expression>
	
	<!-- parents/ancestors -->
	<expression name='parents' alias='ancestors' returns='list of elements'>
		<getter language='js'>
			return this.domNode.parents();
		</getter>
		<!-- note: we get "ancestors of (element)..." for free because of the alias above -->
		<subset syntax='parents of (element) {where|which match} (selector)' language='js'>
			return this.domNode.parents(selector);
		</subset>
		<subset syntax='[(ordinal)] parent of (element) {where|which match} (selector)' language='js'>
			if (ordinal == 0) 	return this.domNode.parent(selector);
			else				return this.domNode.parent(selector)[ordinal];
		</subset>
	</expression>


	<!-- children -->
	<property name='children' type='list of elements' each='child'>
		<length language='js'>
			return this.elements.length;
		</length>

		<getter language='js'>
			return $(this.elements);
		</getter>

		<getone language='js'>
			return $(this.elements[index]);
		</getone>
		
		<setter with='list'>
			for each child in (my children)
				remove it (from me)
			end for
			for each element in list
				add element to me
			end for
		</setter>
		
		<!-- monitor events on the list to add children -->
		<on event='add' with='child and index' language='js'>
			child.setParent(this);
			index -= 1;		// account for 1-based lists in english
			
			var parent = this.domNode[0];
			if (index == 0) {
				parent.insertBefore(child.domNode, parent.childNodes[0]);
			} else {
				var previous = (index >= parent.childNodes.length 
									? parent.childNodes[parent.childNodes.length-1]
									: parent.childNodes[index]
								);
				parent.insertAfter(child, previous);
			}
			this.signal("child added", child, index);
		</on>
		<on event='removed' with="child">
			child.setParent(null);
			this.domNode.remove(child);
			this.signal("child removed", child);
		</on>
		
		<on event='set' with='child and index' language='js'>
			child.setParent(this);
			var parent = this.domNode[0],
				oldElement = this.domNode[0].childNodes[index]
			;
			if (oldElement) {
				parent.replaceChild(child.domNode, oldElement);
			} else {
				parent.appendChild(child.domNode);			
			}
		</on>


		<!-- subsets of the list of children -->
		<subset syntax='[(ordinal)] child [of (element)] (where|which matches) (selector)' returns='element' language='js'>
			if (ordinal == null) ordinal = 0;
			return $(selector, this.domNode)[ordinal];
		</subset>

		<subset syntax='children [of (element)] {where|which match} (selector)' returns='list of elements' language='js'>
			return $(selector, this.domNode);
		</subset>

		<subset syntax='children [of (element)] {where|which match} (selector) indexed by (attribute)' returns='set of elements' language='js'>
			put (the children of element) where selector into (the list)
			create set (the set)
			for each (element) in (the list)
				put (the attribute attribute of element) into (name)
				set the (name) property of (the set) to element
			end for
			return (the set)
		</subset>

	</property>

	<expression syntax='(element) {has|have} children' returns='flag'>
		return (the length of my children) is greater than 0
	</expression>

	<expression syntax='(element) {does not have|do not have} children' returns='flag'>
		return (the length of my children) is 0
	</expression>

	<expression syntax='(element) {is|am} [an] ancestor of (child)' returns='flag'>
		return (the ancestors of child) contains me
	</expression>

	<expression syntax='(element) {is not|am not} [an] ancestor of (child)' returns='flag'>
		return (the ancestors of child) does not contain me
	</expression>

	<expression syntax='(element) {is|am} [a] child of (parent)' returns='flag'>
		return (the children of parent) contains me
	</expression>

	<expression syntax='(element) {is not|am not} [a] child of (parent)' returns='flag'>
		return (the children of parent) does not contain me
	</expression>

	<expression syntax='(element) {is|am} [a] descendant of (parent)' returns='flag'>
		put me into it
		for each ancestor in (my ancestors)
			if (the children of ancestor) contains it then return true
			put ancestor into it
		end for
		return false
	</expression>
	
	
	<!-- match parents -->
<!-- TODO: CONVERT TO EXPRESSION -->
	
	<expression syntax='type' language='js'>
		return this.domNode.tagName;
	</expression>


	<!-- class manipulation -->
	<property name='class'>
		<getter>
			return (my "class" attribute)
		</getter>
		<setter>
			if (type of it) is Array then put (join it with space) into it
			set (my "class" attribute) to it
		</setter>
	</property>

	<expression syntax='classes' returns='list'>
		<!-- hint: (the classes of element) contains "someClassName" -->
		return split (my class) on space
	</expression>
	
	<command syntax='add class (class) to (element)'>
		put (my classes) into classes
		if classes does not contain class then
			add class to the end of classes
			set (my class) to classes
		end if
	</command>
	
	<command syntax='remove class (class) from (element)'>
		put (my classes) into classes
		if classes contains class then
			remove class from classes
			set (my class) to classes
		end if
	</command>
	
	<command syntax='toggle class (class) of (element) with (flag)'>
		if flag is undefined then 
			put (my classes) does not contain (class) into flag
		end if
		if flag is false then 	add class (class)
		else					remove class (class)
	</command>


	<!-- attributes -->	
	<expression syntax='attributes' type='set' each='attribute'>
		<getter language='js'>
			function(element) {
				var attributes = {};
				for (var i = 0, attribute; attribute = this.domNode.attributes[i++];) {
					attributes[attribute.name] = attribute.value;
				}
				return attributes;
			}
		</getter>
		<getone language='js'>
			return this.domNode.getAttribute(name);
		</getone>
		<setter with='set'>
			for each name in set as value
				set (my attribute name) to value
			end for
		</setter>
		<setone with='value' language='js'>
			// smart setAttribute which massages values, understands style, etc
			if (value == null) 	this.domNode.clearAttribute(name);
			else				this.domNode.setAttribute(name, value);
		</setone>
	</expression>


	<!-- specially named attributes -->
	<property name='id'>
		<getter>return (my "id" attribute)</getter>
		<setter>set (my "id" attribute) to it</setter>
	</property>

	<property name='html'>
		<getter language='js'>
			return this.domNode.innerHTML;
		</getter>
		<setter language='js'>
			this.domNode.innerHTML = it;
		</setter>
	</property>


	<!-- styles -->

	<expression syntax='styles' type='set' each='style'>
		<getter language='js'>
			<!-- abstract the computedStyles object to make x-platform sense of this? worth it? -->
			return this.domNode.getComputedStyles();
		</getter>
		<getone language='js'>
			return this.getStyle(name);
		</getone>
		<setter with='set' language='js'>
			this.domNode.setStyle(set);
		</setter>
		<setone language='js'>
			this.domNode.setStyle(name, value);
		</setone>
	</command>
	

	<!-- visibility -->
	<property syntax='visible'>
		<getter>
			return (my style "display") is not "none"
		</getter>
		<setter>
			set (my style "display") to "none"
		</setter>
	</property>
	
	<!-- default style when showing/hiding -->
	<property name='animation style' values="none,fade,slide" default='none'/>
	<!-- default animation speed in seconds -->
	<property name='animation speed' type='speed' value='quick'/>
	<command syntax='show (element) [(speed)] [and then (action)]'/>
	<command syntax='hide (element) [(speed)] [and then (action)]'/>

	<command syntax='fade in (element) [(speed)] [and then (action)]'/>
	<command syntax='fade out (element) [(speed)] [and then (action)]'/>
	<command syntax='cross fade (new element) (for|with) (element) [(speed)] [and then (action)]'/>

	<command syntax='slide in (element) [(speed)] [and then (action)]'/>
	<command syntax='slide out (element) [(speed)] [and then (action)]'/>
	<command syntax='slide replace (new element) (for|with) (element) [(speed)] [and then (action)]'/>
	
	<!-- animation -->
	<command syntax='animate property (name) of (element) [from (start) to (end) [(speed)] [and then (action)]'/>
	<command syntax='animate properties of (element) with (set) [(speed)] [and then (action)]'/>
	<command syntax='stop [all] animations (of|for) (element)'/>
	
	<!-- enabled: sets attribute 'disabled' when not set -->
	<property name="enabled" type='flag'>
		<getter>
			return (my "disabled" attribute) is not empty
		</getter>
		<setter>
			if it is false then 
				set (my "disabled" attribute) to true
			else
				remove (my "disabled" attribute)
			end if
		</setter>
	</property>
	<command syntax='enable (element)'>
		set (my enabled) to true
	</command>
	<command syntax='disable (element)'>
		set (my enabled) to false
	</command>
	
	
	<!-- selected: adds class 'Selected' when set -->
	<property name="selected" type='flag' default='false'>
		<setter>
			set (my selected) to (it is not false)
			if (I am selected) then 	add class "Selected" to me
			else						remove class "Selected" from me
		</setter>
	</property>
	<command syntax='select (element)'>
		set (my selected) to true
	</command>
	<command syntax='deselect (element)'>
		set (my selected) to false
	</command>
	
	
	<!-- selected: adds class 'Focused' when set -->
	<property name="focused" type='flag' default='false'>
		<setter>
			set (my focused) to (it is not false)
			if (I am focused) then 	add class "Focused" to me
			else					remove class "Focused" from me
		</setter>
	</property>
	<command syntax='focus (in|on) (element)'>
		set (my focused) to true
	</command>
	<command syntax='blur (element)'>
		set (my focused) to false
	
	
	
	<!-- css selectors -->
	<expression syntax='(element) matches (selector)' returns='flag'/>

	<!-- dimensions -->
	
	<!-- includes padding + border, but not margins -->
	<property name='width'/>
	<property name='height'/>

	<!-- includes margin + padding + border -->
	<property name='outer width'/>
	<property name='outer height'/>

	<!-- inner content only, does not include margins, padding or border -->
	<property name='inner width'/>
	<property name='inner height'/>

	<!-- amount of us that is actually visible (?) -->
	<expression syntax='visible width'/>
	<expression syntax='visible height'/>

	<!-- amount of visible area that does not fit within our container 
			 includes padding + border, but not margin
	-->
	<expression syntax='scroll width'/>
	<expression syntax='scroll height'/>

	<!-- amount we have scrolled -->
	<property name='[scroll left|horizontal scroll]'/>
	<property name='[scroll top|vertical scroll]'/>

	<command name='scroll (element) to (left)[, (top)] [(speed)]'/>
	<command name='set the scroll left of (element) to (left) [(speed)]'/>
	<command name='set the scroll top of (element) to (top) [(speed)]'/>

	<command name='scroll (element) [left|right|horizontally] to (left) [(speed)]'/>
	<command name='scroll (element) [up|down|vertically] to (top) [(speed)]'/>

	<command name='scroll (element) [left|right|horizontally] by (delta) [(speed)]'/>
	<command name='scroll (element) [up|down|vertically] by (delta) [(speed)]'/>


	<!-- local to enclosing context -->
	<property name='left'/>
	<property name='right'/>
	<property name='top'/>
	<property name='bottom'/>

	<!-- global to page -->
	<expression syntax='page left'/>
	<expression syntax='page right'/>
	<expression syntax='page top'/>
	<expression syntax='page bottom'/>
	
	<command name='move (element) to (x), (y)'/>
	<command name='move (element) to (x), (y)'/>
	<command name='move (element) near (other element)'/>

	<!-- z-index -->
	<property name='z index' />
	<command syntax='(move|bring) (element) to front'/>
	<command syntax='(move|send) (element) to back'/>
	<command syntax='(move|bring) (element) forward'/>
	<command syntax='(move|bring) (element) backward[s]'/>
	<command syntax='move (element) in front of (other element)'/>
	<command syntax='move (element) behind (other element)'/>

	
	<!-- events -->
	<command syntax='on event (event name) of (element) do (action)'/>
	<command syntax='on next event (event name) (of|for) (element) do (action)'/>		<!-- once -->
	<command syntax='register event (event name) (of|for) (element) (with|to do) (action)'/>
	<command syntax='add event (event name) (of|for) (element) with (action)'/>
	<command syntax='remove event (event name) from (element) with (action)'/>	<!-- ??? -->
	<command syntax='remove [all] (event name) events from (element)'/>
	
	
	
	<!-- assigning to these events will hook up after draw/set html -->
	<property name='mousemove'>
		<setter with='action'>
			on event "mousemove" of me do action
		</setter>
	</property>
	<event name='mousenter'/>
	<event name='mousedown'/>
	<event name='mousestilldown'/>
	<event name='mouseup'/>
	<event name='click'/>
	<event name='double click'/>
	<event name='triple click'/>
	<event name='right click'/>
	<event name='hover'/>
	<event name='hover out'/>
	<event name='mouseleave'/>

	<event name='focus'/>
	<event name='blur'/>
	<event name='keypress'/>

	<event name='resize'/>
	<event name='scroll'/>
	
	<!-- drag and drop -->
	<event name='drag start'/>
	<event name='drag end'/>
	<event name='drag'/>
	<event name='drag enter'/>
	<event name='drag leave'/>
	<event name='drop'/>
</thing>
