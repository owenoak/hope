<thing className="scroller" superClass="Drawable">
	<property name='scrolling [of (scroller)]'>
		<setter with='new state'>
			if (new state) is defined then set (my scrolling) to (new state is not false)
			if (I am scrolling) then 
				add class "scrolling" to (my element)
				set (the left of my scroll mask) to (the width of my left scroller)
				set (the right of my scroll mask) to (the width of my right scroller)
			else 
				remove class "scrolling" from (my element)
				set (the left of my scroll mask) to 0
				set (the right of my scroll mask) to 0
				scroll to 0
			end if
		</setter>
	</property>

	<expression name='scroll left [of (scroller)]' type='number'>
		<getter>
			return (the scroll left of my body)
		</getter>
		<!-- all scrolling must go through this -->
		<setter with='left'>
			put (my scroll max) into (max)
			if (left) is defined
				if (left) is less than 0 then set (left) to 0
				if (left) is greater than (max) then set (left) to (max)
				scroll (my body) left to (left) quickly
			end if
		
			put (my scroll left) is 0 into (can scroll left)
			set (the enabled of my left scroll button) to (can scroll left)
			
			put (my scroll right) is (max) into (can scroll right)
			set (the enabled of my right scroll button) to (can scroll right)
		</setter>
	</property>


	<command syntax='scroll [(scroller)] to (left)'>
		set (my scroll left) to (left)
	</command>
	<command syntax='scroll [(scroller)] by (delta)'>
		add (delta) to (my scroll left)
	</command>
	
	<expression name='scroll right [of (scroller)]' type='number'>
		<getter>
			return (my scroll left) plus (the width of my scroll mask)
		</getter>
		<setter>
			put (it) minus (the width of my scroll mask) into (left)
			scroll (me) to (left) quickly
		</setter>
	</expression>
	<expression name='scroll max [of (scroller)]' type='number'>
		<getter>
			set (max) to (the width of my body) minus (the width of my element)
			if (max) is less than 0 then set (max) to 0
			return (max)
		</getter>
	</expression>
	
	<command syntax='show child (child) [of (scroller)]'>
		put (the left of child) into (left)
		put (the right of child) into (right)
		if (my scroll left) is greater than (left) then
			set (my scroll left) to (left)
		else if (my scroll right) is less than (right) then
			set (my scroll right) to (right)
		end if
	</command>
	
	<command syntax='resize [(scroller)]'>
		if (the width of my body) is greater than 0 then
			set (the scrolling of me) to (my scroll max) is greater than 0
		end if
	</command>

	<!-- short cuts for our parts -->
	<expression syntax='scroll mask [of (scroller)]'>
		return (my "scroll mask" part)
	</expression>

	<expression syntax='left scroll button [of (scroller)]'>
		return (my "left scroll button" part)
	</expression>

	<expression syntax='right scroll button [of (scroller)]'>
		return (my "right scroll button" part)
	</expression>

	<!-- basic template: subclasses should have at least the parts defined below -->
	<template>
		<div class='{{class name}}' part='element'>
			<div class='{{class name}}ScrollMask ScrollMask' part='scroll mask'>
				<div class='{{class name}}Body ScrollBody' part='body'></div>
			</div>
			<div class='{{class name}}LeftScrollButton LeftScrollButton' part='left scroll button' onmousestilldown='scroll by -10'/>
			<div class='{{class name}}RightScrollButton RightScrollButton' part='right scroll button' onmousestilldown='scroll by 10'/>
		</div>
	</template>
</thing>
